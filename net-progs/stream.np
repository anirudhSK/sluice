// this program compiles. Remove this comment before compiling

global DPORT = 3490;
global IMPR_PORT = 11111; 
global CLICK_PORT = 22222;

packet impr {
    transient ipv4srcAddr : bit<32>;
    transient ipv4dstAddr : bit<32>;
    transient ipv4protocol : bit<8>;
    transient tcpSrcPort : bit<16>;
    transient tcpDstPort : bit<16>;
    transient adId : bit<32>;
    transient impr_time : bit<32>;    
}

packet click {
    transient ipv4srcAddr : bit<32>;
    transient ipv4dstAddr : bit<32>;
    transient ipv4protocol : bit<8>;
    transient tcpSrcPort : bit<16>;
    transient tcpDstPort : bit<16>;
    transient adId : bit<32>;
    transient click_time : bit<32>;    
}

packet result {
    transient ipv4srcAddr : bit<32>;
    transient ipv4dstAddr : bit<32>;
    transient ipv4protocol : bit<8>;
    transient tcpSrcPort : bit<16>;
    transient tcpDstPort : bit<16>;
    transient adId : bit<32>;
    transient impr_time : bit<32>;    
    transient click_time : bit<32>;    
}


snippet send_impr() {
  output a : impr;
  a.tcpsrcPort = IMPR_PORT;
  a.tcpdstPort = DPORT;
  call join();
}

snippet send_click() {
  output b : click;
  b.tcpsrcPort = CLICK_PORT;
  b.tcpdstPort = DPORT;
  call join();
}

snippet join () {
  input p : impr;
  input q : click;
  output r : result;
  if (p.adId == q.adId) {
    r.adId = p.adId;
    r.impr_time = p.impr_time;
    r.click_time = q.click_time;
    call receive();
  }
}


snippet receive() {
    input x : result;
}

(send_impr, join):a->p,
(send_click, join):b->q,
(join, receive):r->x,


