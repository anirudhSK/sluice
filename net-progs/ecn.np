// simple sculpt program for explicit congestion notification protocol
// remove comments before compiling

global queue_size : bit<32>;
global THRESHOLD : bit<32> = 1000;
global SEND_PORT : bit<16> = 11111; 
global RECEIVE_PORT : bit<16> = 22222;


packet pac {
    ipv4srcAddr : bit<32>;
    ipv4dstAddr : bit<32>;
    ipv4protocol : bit<8>;
    ipv4diffserv : bit<8>;
    tcpSrcPort : bit<16>;
    tcpDstPort : bit<16>;
    tcpEce     : bit<1>;
    tcpCwr     : bit<1>;
    tcpWindow  : bit<16>;
}


// Run on sender. Set diffserv to 1 to indicate ecn capability
// First checks if some input packet has cwr set. If cwr is set, reduce window size by half

@ sending_host
snippet send() {
    input check_cwr2 : bit<1>;
    output a : pac;
    if (check_cwr2 == 1) {
        a.tcpWindow = a.tcpWindow / 2;
    } 
    a.ipv4diffserv = 1;
    a.tcpSrcPort = SEND_PORT;
    a.tcpDstPort = RECEIVE_PORT;
}


// Run on switch. Treat diffserv as if first 6 bits are 0, only last 2 count for ecn. 
// Later, can change to shift to extract last 2 bits from diffserv

@ programmable_switch
snippet switch() {
    input x : pac;
    output y : pac;
    transient e : bit<1>;
    if (x.ipv4diffserv == 1) {
        e = queue_size > THRESHOLD;
        y.ipv4diffserv = e ? 3 : 1;
    }
}


// Run on receiver. Diffserv 3 indicates CE = 0b11

@ receiving_host
snippet receive() {
    input p : pac;
    output q: pac;
    if (p.ipv4diffserv == 3) {
        q.tcpSrcPort = RECEIVE_PORT;
        q.tcpDstPort = SEND_PORT;
        q.tcpEce = 1;
    }
}


// Run on sender. Acknowledges congestion indication by sending a segment with the CWR bit set to receiver 

@ sending_host
snippet echo() {
    input b : pac;
    output c : pac;
    output check_cwr1 : bit<1>;
    if (b.tcpEce == 1) {
        check_cwr1 = 1;
        c.tcpCwr = 1;
        c.tcpSrcPort = SEND_PORT;
        c.tcpDstPort = RECEIVE_PORT;
    }
}


// Run on receiver, Keep transmitting echo to sender if cwr is not set

@ receiving_host
snippet cwr() {
    input p : pac;
    output r : pac;
    if (p.tcpCwr == 0) {
        r.tcpEce = 1;
        r.tcpSrcPort = RECEIVE_PORT;
        r.tcpDstPort = SEND_PORT;
    }
}

(send, switch):a->x,
(switch, receive):y->p,
(receive, echo):q->b,
(echo, send):check_cwr1->check_cwr2,
(echo, cwr):c->p,
(cwr,echo):r->b,
